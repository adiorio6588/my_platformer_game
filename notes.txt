(Part 1)
- Import pygame, and other imports needed
- Clock
- Variables
- Game window caption
- Create Window
- Game loop
- Add [pygame.display.update()]
- Add [clock.tick()]


(Part 2)
- Player image variable
- Player location variable
- Player movemenets variable = False

- Player keys when and not pressed in game loop
- Player movemenet frames [player_location[0] +4, and -4]
- Screen fill to prevent trails
- Created Player Rectangle variable
- Created Player Rectangle for collisions that tracks Player
- Created test Rectangle variable
- Drew Rectangle in game loop that changes color when the player collides
       
    if player_rect.colliderect(test_rect):
        pygame.draw.rect(screen, (255,0,0), test_rect)
    else:
        pygame.draw.rect(screen, (0,0,0), test_rect)

- Created player momentum in game loop that follows the player's Rectangle

    if player_rect.colliderect(test_rect):
        pygame.draw.rect(screen, (255,0,0), test_rect)
    else:
        pygame.draw.rect(screen, (0,0,0), test_rect)

- else statment flips momentum causing the player to bounce up


(Part 3)
- Removed test Rectangle
- Removed bounch momentum
- Added game map
- Added png tiles
- Added Rect for tiles
- Added new player momentum
- Added collisions for tile Rect


(Part 4)
- Load map from txt, created load_map function
- Created true_scroll variable
- Added scroll effects to map and player
- Added a three player background 








def load_map(path): # (PART 4)
    f = open(path + '.txt','r')
    data = f.read()
    f.close()
    data = data.split('\n')
    game_map = []
    for row in data:
        game_map.append(list(row))
    return game_map


y = 0
   for layer in game_map:
       x = 0
       for tile in layer:
            if tile == '1':
                display.blit(dirt_img,(x * 16 - scroll[0], y * 16 - scroll[1])) # scrolling/ tile movements (PART 4)
            if tile == '2':
                display.blit(grass_img,(x * 16 - scroll[0], y * 16 - scroll[1]))
            if tile != '0':
                tile_rects.append(pygame.Rect(x * 16, y * 16 ,16 ,16))
            x += 1
        y += 1
